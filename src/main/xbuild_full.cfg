# Name des Systems: Sysifus , Solve, MicroBuild, BinMaker, Transformer


# name: <artefact name>[<default variant>] <version>
# <version> must specify both, a artefactVersion AND a apiVersion.
# <version> can be "<string>" or "[<artefact-version>]{<api-version>}"
# if <version> does not start with '[', then it is <string> and it is equal to "[<string>]{<string}"
# if <default variant> is specified, then there is no artefact build with name <artefact name> but there is an artefact found with this name if it is specified as dependency somewhere and it is taken the variant defined here.
# if there are variants defined (see later), then it is also found this artefact just by defining name <artefact name> and it is taken the variant with best match.
# if default variant is specified here and is is not refined later, then it is used just the following specification here.
#
name: esl[error] 0.1.0
#name: esl 0.1.0

#base: solve 1.0.0 # "solve 1.0.0" ist der Default-Base
                   # von "base" werden die folgenden Attribute geerbt:
                   # - "source-main-dir"
                   # - "source-test-dir"
                   # - "build-dir"
                   # - "sources"
                   # - "headers"


sources-main-dir: ../esl-core-src src/main # "src/main" wurde bereits von "xbuild.cfg" von "solve 1.0.0" geerbt
                                           # "sources-main-dir:" ist NICHT relevant, wenn dieses Artefact als Dependecy verwendet wird
sources-test-dir: src/test                 # "src/test" wurde bereits von "xbuild.cfg" von "solve 1.0.0" geerbt
                                           # "sources-test-dir:" ist NICHT relevant, wenn dieses Artefact als Dependecy verwendet wird
headers-dir: src/api                       # Von "xbuild.cfg" aus "solve 1.0.0" würde "src/main" geerbt werden.
                                           # "headers-dir:" ist NICHT relevant, wenn dieses Artefact als Dependecy verwendet wird, sondern nur zum kompilieren und paketieren relevant
build-dir: build                           # "build" wurde bereits von "xbuild.cfg" von "solve 1.0.0" geerbt, daher ist diese Zeile überflüssig. Es kann hier nur ein Directory angegeben werden (im Gegensatz zu "sources-main-dir:")
                                           # "build-dir:" ist NICHT relevant, wenn dieses Artefact als Dependecy verwendet wird
source-file-pattern: *.cpp *.c++           # "*.cpp" wurde bereits von "xbuild.cfg" von "solve 1.0.0" geerbt 
header-file-pattern: *.h *.hpp             # "*.h" wurde bereits von "xbuild.cfg" von "solve 1.0.0" geerbt 

architecture: linux-gcc

provide: source static dynamic executable
#package: source static dynamic executable

# define-public wird auch bei dem Artefakt als define(-public) gesetzt, welche dieses Artefakt verwenden
define-public: BOOST_STACKTRACE_USE_ADDR2LINE

generator: yacc bison moc db2sqc jni protobuf

#license: GPLv2 or Commercial

system: boost_filesystem
system: dl
system: microhttpd
system: curl
system: pthread # (also "system-static" und "system-dynamic". Enthält aber automatisch auch "static" und "dynamic")
dynamic: qt [5.0 5.5]
dynamic,static: foo 0.1.0 # ist aquivalent zu [0.1.0]{0.1.0} und besagt, dass die Artefact-Version 0.1.0 UND die API-Version {0.1.0} verwendet werden.
                          # alternativ geht auch nur [0.1.0] oder nur {3} oder kombiniert beides [0.1.0]{3} [0.1.0 0.1.9].
                          # Ebenfalls ist die Angabe von Ranges mögliche, also nur {3 4} oder [0.1.0 0.1.9] möglich.
                          # Es lassen sich auch beide Angaben mit oder ohne Ranges kombinieren, wie z.B. [0.1.0]{3 4} oder [0.1.0 0.1.9]{3} oder [0.1.0]{3 4} oder [0.1.0 0.1.9]{3 4}
                          # Und natürlich lassen solche Angaben auch Auflistung, wie z.B. "0.2.0 [0.1.0]{3 4} [0.1.5 0.1.9] {4}"

# "variant: <name>" leitet eine Variante ein. Alles was ab hier folgt, beschreibt die Variante, bis eine neue Variante eingeleitet wird oder ein anderer Context-Switch erfolgt, wie z.B. "solved: [<variant name>]".
# grundsätzlich leitet die Variante von der obigen Defintion ab, d.h. es gelten die obigen Definitionen, die hier ggf. erweitert oder überschrieben werden.
# "package:" ersetzt die obige package-Definition
# wird "define:" oder "define-public:" angegeben, werden neue defines hinzugefügt und bereits oben gesetze defines ersetzt
# wird "system","dynamic","static" hier angegeben, werden neue Bibliotheken hinzugefügt und bereits oben definierte ersetzt (z.B. wird aus "dynamic" dann "static" oder es wird eine andere Variante der Lib gezogen)

variant: silent # sorgt für esl[silent] 0.1.0
define-public: ESL_LOGGING_LEVEL_SILENT
sources-main-dir: ../esl-core-src src/main-silent

variant: info warn error debug trace
system: boost_filesystem[debug]

variant: info # sorgt für esl[info] 0.1.0
define-public: ESL_LOGGING_LEVEL_INFO

variant: warn # sorgt für esl[warn] 0.1.0
define-public: ESL_LOGGING_LEVEL_WARN

variant: error # sorgt für esl[error] 0.1.0
define-public: ESL_LOGGING_LEVEL_ERROR

variant: debug # sorgt für esl[debug] 0.1.0
define-public: ESL_LOGGING_LEVEL_DEBUG

variant: trace # sorgt für esl[trace] 0.1.0
define-public: ESL_LOGGING_LEVEL_TRACE

# der Eintrag "solved" wird ausschließlich beim "goal: package" verwendet, in dem das "xbuild.cfg"-File erzeugt wird und für das Goal: "deploy" verwendet wird.
# "solved: [<variant>]" wird entweder nur einmal erzeugt ohne Angabe von [<variant>], also lediglich "solved:". Dies ist der Fall, wenn keine Varianten definiert sind.
# Oder es wird pro Variante Eintrag "solved: <variant>" angegeben, wenn Varianten definiert wurden
#solved:
#dynamic: qt {5}

# ODER bei verfügbaren Varianten (wie HIER) pro Variante eine Eintrag, wie "solved: silent", "solved: info" etc.
solved: silent
dynamic: qt {5}

solved: info
dynamic: qt {5}

solved: warn
dynamic: qt {5}

solved: error
dynamic: qt {5}

solved: debug
dynamic: qt {5}

solved: trace
dynamic: qt {5}
